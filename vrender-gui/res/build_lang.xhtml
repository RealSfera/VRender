<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
    <title></title>
  </head>
  <body>
    <h2>
      <center>Основы языка построения</center>
    </h2>
    <p>     Данный язык был специально разработан для упрощения его изучения и
      простоты работы с ним. За основу были взяты выражения из языка
      программирования C, а также одна конструкция из Фортрана и несколько
      специализированных (которые не встречаются в других языках и выражениях).</p>
    <p>     НО он специально был построен так, чтобы быть максимально похожим на
      обычные математические выражения.</p>
    <p>     В языке присутсвуют: выражения, операторы, переменные, функции,
      условные переходы, циклы (сумма).<br />
      <strong>    Выражение</strong> - это последовательность переменных,
      констант и функций, соединённых между собой арифметическими, логическими
      и/или другими операциями.<br />
          <strong>Оператор</strong> - это команда (инструкция), наименьшая
      часть языка.<br />
          <strong>Переменная</strong> - величина, которая, в отличии от
      констант (например, любое число), может изменятся; можно ещё назвать это
      ячейкой памяти в которой хранится некоторое значение.<br />
          <strong>Константа</strong> - неизменная величина (кстати, переменная
      тоже может быть константной, т. е. неизменной)<br />
          <strong>Функция </strong>- тут можно указать два определения: <br />
              1. это <em>закон</em>, по которому каждому элементу некоторого
      множества ставится в соотвествие некоторый элемент другого множества (т.
      е. одна величина определяет значение другой) [<em>Взято с Wikipedia</em>]<br />
              2. это некоторая <em>автономная</em> часть программы, выполняющая
      некоторую последовательность действий, приводящих к какому-либо результату<br />
          <strong>Условный переход</strong> - команда, на изменение порядка
      вычисления (или исполнения), которая зависит от некоторого условия<br />
          <strong>Цикл</strong> - многократное повторение некоторого действия
      (или операции)<br />
    </p>
    <p>    В языке можно использовать буквы латинского алфавита a-z и A-Z, цифры
      0-9, а также некоторые спец-символы.</p>
    <p>     А теперь пройдёмся по его основным элементам.</p>
    <p>
      <h3>Переменные</h3>
    </p>
    <p>     Как и в математике, в этом языке можно создавать переменные,
      присваивать им значения и затем использовать их в выражениях. И так, перед
      тем, как использовать переменную, нужно сначало её создать. Делается это
      так: <code>a = 0; </code>Таким образом Вы создали переменную <code>a</code>
      и присвоили ей значение <code>0</code>. Наверно Вы обратили внимание, что
      в конце стоит точка-с-запятой, это обязательный элемент, говорящий о конце
      выражения. Самое интересное, что можно написать дальше после
      точки-с-запятой следующее выражение, таким образом можно в одной строчке
      написать всю функцию построения, просто разделяя выражения
      точкой-с-запятой. </p>
    <p>     А теперь вернёмся к переменным. Имя переменной должно обязательно
      начинаться с буквы, а дальше можно использовать только буквы латинского
      алфавита и/или цифры. Длина имени ограничена 63 символами. При создании
      переменной, после знака присваивания (=), можно использовать любые
      выражения. Интересный момент, само присваивание (и создание переменной)
      также можно производить внутри выражения.</p>
    <p>
      <h3>Выражения</h3>
    </p>
    <p>     Выражения чаще всего начинаются с присваивания, но можно писать
      выражения, начинающиеся с чего угодно, главное чтобы оно было
      синтаксически правильным и заканчивалось точкой-с-запятой. Также как и в
      математике можно писать такие вещи: <code>a = 1 + 2;</code> Как видите,
      всё просто. </p>
    <p>     В выражениях можно использовать следующие операции: <code>**</code>
      (возведение в степень), <code>+</code> (сложение), <code>-</code>
      (вычитание), <code>*</code> (умножение), <code>\</code> (деление), <code>&gt;</code>
      (больше), <code>&lt;</code> (меньше), <code>&gt;=</code> (больше или
      равно), <code>&lt;=</code> (меньше или равно), <code>==</code> (равно),
      <code>!=</code> (неравно). Логические операции(<code>&gt; &lt; &gt;= &lt;=
        == !=</code>) работают немного иначе, чем обычно. Например,  <code>a =
        1 &gt; 2;</code> , здесь <code>a</code> будет равно <code>0</code>,
      так как <code>1</code> меньше <code>2</code>, результат ложь (<code>0</code>),
      или такой пример: <code>b = 3; a = b &gt; 2;</code> , здесь <code>a</code>
      равно <code>1</code>, т. к. <code>3</code> больше <code>2</code>,
      результат истина (<code>1</code>), таким образом результатом логического
      выражения является <code>1</code> или <code>0</code>. Вот ещё пример: <code>a
        = 3; b = 4; c = (a &gt; 3) + 2 * (b &gt; 2); </code>, где <code>c</code>
      будет равно <code>2</code>.</p>
    <p>    Обратите внимание: в выражениях могут присутствовать как целые числа,
      так и вещественные числа (с точкой). Так например <code>1</code> - целое
      число, <code>1.3</code> - вещественное, но не каких проверок типов в
      языке нет, таким образом в языке есть только вещественный тип и все целые
      числа преобразуются в вещественные. Также нужно учитывать, что в некоторых
      конструкциях (циклы, факториал...) используется только целая положительная
      часть числа.</p>
    <p>     Более сложными элементами являются составные операции: <code>+=</code>
      (сложить и присвоить), <code>-=</code> (вычесть и присвоить), <code>*=</code>
      (умножить и присвоить), <code>/=</code> (делить и присвоить). Работают
      они так: сначало вычисляется выражение справа от них, затем с этим
      результатом и значением переменной слева производится соотвествующая
      операция (<code>+ - * /</code>) и после чего полученное значение
      присваивается переменной слева. Пример: <code>b = 2; b += 1;</code> , где
      <code>b</code> будет равно <code>3</code>, т. е. это тоже самое что и <code>b
        = 2; b = b + 1</code>;.<br />
    </p>
    <p>     Также присутствуют унарные операции (работают над одним операндом):
      <code>!</code> (факториал), <code>-</code> (унарный минус), <code>+</code>
      (унарный плюс). Пример: <code>a = -2; b = +3; c = 4! + (a + b)!;</code> .<br />
    </p>
    <p>     Для ведения порядка вычисления (задания приоритета вычисления)
      используются круглые скобки <code>()</code>. Например: <code>a = 1 + 2 *
        3; b = ( 1 + 2) * 3;</code>, здесь <code>a</code> будет равно <code>7</code>,
      а <code>b</code> равно <code>9</code>, т. к. сначало вычислится (<code>1+2</code>),
      а потом результат умножится на <code>3</code>. </p>
    <p>
      <h3>Функции<br />
      </h3>
    </p>
    <p><em>Внимание, не путать с функцией построения, т. к. функцию построения
        вы состовляете сами, а следующие функции являются встроенными в язык!</em><br />
    </p>
    <p>
      <h3></h3>
    </p>
    <p>     Для вызова (и получения значения) функции требуется написать её имя,
      затем идёт открывающая скобка, за ней следуют аргументы (параметры),
      разделённые запятыми и затем ставится закрывающая скобка. Вот пример: <code>x
        = 0; a = sin(x);</code> . Здесь a будет присвоенно значение <code>sin(0)</code>,
      т. е. <code>0</code>. В языке предусмотрен большой набор функций. Вот их
      список:<code><br />
      </code></p>
    <code>sin(x) - синус</code> <br />
    <code>cos(x) - косинус</code> <br />
    <code>tan(x) - тангенс</code> <br />
    <code>sqrt(x) - квадратный корень из x</code> <br />
    <code>min(a, b) - минимальное из двух чисел</code> <br />
    <code>max(a, b) - максимальное из двух чисел</code> <br />
    <code>cerp(a, b, t) - косинусная интерполяция</code> <br />
    <code>lerp(a, b, t) - линейная интерполяция</code> <br />
    <code>radian(x) - перевести x в радианы</code> <br />
    <code>degree(x) - перевести x в градусы</code> <br />
    <code>clamp(x, a, b) - возвращает x приведённое к интервалу [a, b]</code> <br />
    <code>abs(a) - абсолютное значение</code> <br />
    <code>asin(x) - арксинус</code> <br />
    <code>acos(x) - арккосинус</code> <br />
    <code>ceil(x) - округление до ближайшего большего целого числа</code> <br />
    <code>cosh(x) - гиперболический косинус</code> <br />
    <code>sinh(x) - гиперболический синус</code> <br />
    <code>tanh(x) - гиперболический тангенс</code> <br />
    <code>exp(x) - экспонента (x степень)</code> <br />
    <code>floor(x) - округление до ближайшего меньшего целого числа</code> <br />
    <code>fmod(a, b) - вычисление остатка от деления нацело для чисел с
      плавающей точкой</code> <br />
    <code>ln(x) - натуральный логарифм</code> <br />
    <code>log10(x) - логарифм по основанию 10</code> <br />
    <code>atan(x) - арктангенс</code> <br />
    <code>cbrt(x) - кубический корень из x</code> <br />
    <code>dot2(x1, y1, x2, y2) - скалярное произведение между векторами (x1, y1)
      и (x2, y2)</code> <br />
    <code>distance3(x1, y1, z1, x2, y2, z2) - расстояние между точками (x1, y1,
      z1) и (x2, y2, z2)</code> <br />
    <code>dot3(x1, y1, z1, x2, y2, z2) - скалярное произведение между векторами
      (x1, y1, z1) и (x2, y2, z2)</code> <br />
    <code>length3(x, y, z) - длина вектора (x, y, z)</code> <br />
    <code>distance2(x1, y1, x2, y2) - расстояние между точками (x1, y1) и (x2,
      y2)</code> <br />
    <code>length2(x, y) - длина вектора (x, y)</code> <br />
    <code>vnoise1(x) - численный шум в точке (x)</code> <br />
    <code>vnoise2(x, y) - численный шум в точке (x, y)</code> <br />
    <code>vnoise3(x, y, z) - численный шум в точке (x, y, z)<br />
    </code><code>pnoise3(x, y, z) - шум Перлина в точке (x, y, z)</code><br />
    <code>snoise1(x) - симплекс шум в точке (x)</code> <br />
    <code>snoise2(x, y) - </code><code>симплекс</code><code> шум в точке (x, y)</code>
    <br />
    <code>snoise3(x, y, z) - </code><code>симплекс</code><code> шум в точке (x,
      y, z)</code><br />
    <p></p>
    <p>
      <h3>Условные переходы<br />
      </h3>
    </p>
    <p>     В языке предусмотрена возможность создания условных переходов
      (разветвлений), т. е. возможность изменения направления хода вычисления.
      Основным элементом разветвлений является - тернарный оператор <code>условие
        ? выражение1 : выражение2 </code>. Работает он следующим образом:
      сначало вычисляется <code>условие</code>, если оно истинно (не равно <code>0</code>),
      то вычисляется <code>выражение1</code>, иначе вычисляется <code>выражение2</code>,
      результат вычисления <code>выражения (1 или 2)</code> становится
      результатом всего разветвления. Пример: <code>b = 3; c = cos(0); a = c
        &gt; b ? c - b : b - c;</code> . Здесь <code>a</code> будет равно <code>2</code>,
      т. к. <code>c &gt; b</code> ложно (<code>1 &gt; 3</code>), то вычисляется
      <code>b - c</code> (<code>3 - 1</code>).</p>
    <p></p>
    <p>
      <h3>Циклы</h3>
    </p>
    <p>     Иногда возникает необходимость вычислить некоторое выражение
      несколько раз или просто вычислить сумму. Для это в языке предусмотрен
      оператор цикла <code>a..b: выражение</code>. Работает он так: сначало
      вычисляется <code>a</code> (это может быть выражением в скобках), затем <code>b</code>
      (тоже может быть выражением), после чего запускается цикличное вычисление
      <code>выражения</code>, где количество итераций (проходов) равно разности
      между <code>a</code> и <code>b</code> плюс <code>1</code>, не учитывая
      знак. Результаты вычислений суммируются и в конце эта сумма становится
      результатом всего цикла. Пример: <code>b = 2; a = 0..3: b + 1;</code> .
      Здесь <code>a</code> будет равно <code>12</code>, так как <code>b + 1</code>
      будет просуммировано <code>4</code> раза. Есть очень интересный элемент:
      внутри цикла начинает действовать специальная переменная <code>i</code>,
      которая равна номеру итерации (прохода) цикла. Так например: <code>b = 2;
        a = 0..3: (b+1)*i;</code> . Здесь a будет равно <code>18</code>, т. к.
      в выражении <code>(b+1)*i</code>, <code>i</code> будет менятся от <code>0</code>
      до <code>3</code> и таким образом вычислится сумма произведений <code>3*i</code>
      (<code>3*0 + 3*1 + 3*2 + 3*3</code>).</p>
    <p></p>
    <p></p>
    <h3>Встроенные переменные</h3>
    <p>
      <h3></h3>
    </p>
    <p>    Так как данный язык создавался в первую очередь для построения
      скалярных полей, то в нём предусмотрены специальные переменные, которым
      перед построением присваиваются значения. Переменные <code>x, y, z</code>
      являются встроенными и их значение равно координатам вычисляемой точки
      внутри скалярного поля. Их значения изменяются от <code>0</code> до <code>размер
        скалярного поля - 1</code>. Эти переменные можно изменять, но это ни на
      что, не повлияет.</p>
    <p>    Переменная <code>d</code> является самой основной, так как
      присвоенное ей значение становится значением в соотвествующей точке
      скалярного поля, т. е. она является выходной переменной. По-умолчанию она
      равна <code>0</code>.</p>
    <h3>Примеры</h3>
    <p></p>
    <p>    Вот некоторые интересные функции построения, которые можно построить
      в программе (и это только одна миллионная часть возможностей построения):</p>
    <p><em>    </em><em>Установите размер скалярного поля в 128 по всем
        координатам, размер поля полигонизации в 40, изо-уровень установите в 30
        (или другой необходимый уровень), также рекомендую переписывать функцию
        построения вручную, чтобы случайно не скопировать управляющий-символ
        HTML.</em><br />
    </p>
    <p>    <strong>Сфера:</strong><br />
      <code>        x = x - 64;<br />
                y = y - 64;<br />
                z = z - 64;<br />
                <br />
                d = x**2 + y**2 + z**2 - 20**2;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   
      <strong>Тор:</strong><br />
      <code>        x = x - 64;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            y = y - 64;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            z = z - 64;</code></p>
    <p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            <br />
      </code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            d = (30 - sqrt(x**2 + y**2))**2 + z**2 - 15**2;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code><br />
      </code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   
      <strong>Круговой конус: </strong>(изо-уровень равен 0)<br />
      <code>        x = x - 64;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            y = y - 64;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            z = z - 64;</code></p>
    <p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code><br />
      </code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            d = (x/3)**2 +(y/3)**2 - (z/4)**2;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code><br />
      </code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   
      <strong></strong><strong>"Растущие яблоки": </strong>(изо-уровень
      изменяется от -300 до 300, с шагом 1)</p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            d = sin(x)*x + sin(y)*y + sin(z)*z;</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br />
    </p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">   
      <b>Зашумленная сфера:</b></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            d = distance3(x, y, z, 64, 64, 64);</code></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><code>   
            d += snoise3(x, y, z) * 2;</code><!--EndFragment--></p>
    <p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><!--EndFragment--></p>
        <em>Сфера расчитывается при помощи distance3, а шум создаётся с помощью
      snoise3. </em>
    <p></p>
    <p></p>
  </body>
</html>
